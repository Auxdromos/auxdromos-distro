include:
  - project: 'auxdromos/auxdromos-distro'
    file: 'aws/sit/gitlab-ci/.gitlab-ci-template.yml'

deploy_sit:
  stage: deploy_sit
  image: alpine:latest
  dependencies:
    - extract_module_info
  timeout: 15m
  before_script:
    - apk add --no-cache openssh-client bash aws-cli
    - mkdir -p ~/.ssh
    - echo "$EC2_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - set -e
    - echo "Caricamento dell'ultima versione su istanza SIT..."
    - if [ -f module_info.env ]; then . module_info.env; fi
    - |
      # Crea directory temporanea locale
      mkdir -p /tmp/${MODULE_NAME}
      
      # Scarica il pacchetto dal bucket S3
      aws s3 cp "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" /tmp/${MODULE_NAME}/ --recursive
      
      # Prepara la directory remota
      ssh ${EC2_USER}@${EC2_HOST} "mkdir -p /app/${MODULE_NAME}/artifacts/"
      
      # Trasferisci i file
      scp -r /tmp/${MODULE_NAME}/* ${EC2_USER}@${EC2_HOST}:/app/${MODULE_NAME}/artifacts/
      
      # Crea un file marker con la versione attuale
      echo "${MODULE_NAME}-${VERSION}" > /tmp/current-version.txt
      scp /tmp/current-version.txt ${EC2_USER}@${EC2_HOST}:/app/${MODULE_NAME}/current-version.txt
      
      # Verifica se esiste uno script di deploy specifico sull'istanza e lo esegue
      ssh ${EC2_USER}@${EC2_HOST} "if [ -f /app/${MODULE_NAME}/deploy.sh ]; then cd /app/${MODULE_NAME} && ./deploy.sh; else echo 'Nessuno script di deploy trovato'; fi"
      
      echo "Artefatto deployato con successo su istanza SIT: ${MODULE_NAME}-${VERSION}"
  after_script:
    - |
      if [ $CI_JOB_STATUS == "success" ]; then
        echo "Deployment completato con successo per ${MODULE_NAME}-${VERSION}"
      else
        echo "Deployment fallito per ${MODULE_NAME}-${VERSION}"
      fi
  only:
    - main