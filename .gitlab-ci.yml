include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

image: alpine:latest

stages:
  - prepare
  - test
  - package
  - upload
  - deploy_configs

variables:
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_ACCOUNT_ID: "463470955561"
  S3_BUCKET: "auxdromos-artifacts"

extract_module_info:
  stage: prepare
  script: |
    echo "Estrazione delle informazioni del modulo di distribuzione..."
    # Se c'è un pom.xml o altro file di configurazione, estrai le info
    if [ -f "pom.xml" ]; then
      # Installa strumenti necessari
      apk add --no-cache grep sed
    
      export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    else
      # Usa un nome predefinito se non c'è un pom.xml
      export MODULE_NAME="auxdromos-configs"
      export VERSION="1.0.0-${CI_COMMIT_SHORT_SHA}"
    fi
    
    echo "MODULE_NAME=$MODULE_NAME" >> module_info.env
    echo "VERSION=$VERSION" >> module_info.env
    
    echo "Modulo: $MODULE_NAME, Versione: $VERSION"
  artifacts:
    reports:
      dotenv: module_info.env

package_configs:
  stage: package
  script:
    - echo "Creazione del pacchetto di configurazione $MODULE_NAME versione $VERSION..."
    - apk add --no-cache zip

    # Crea un archivio con tutti i file di configurazione e script
    - mkdir -p dist
    - zip -r dist/$MODULE_NAME-$VERSION.zip aws/ docker/ scripts/ env/ *.yml *.yaml *.properties || echo "Alcuni file potrebbero non esistere, ma lo zip è stato creato comunque"

    # Crea un manifest
    - |
      cat > dist/manifest.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  dependencies:
    - extract_module_info
  artifacts:
    paths:
      - dist/

upload_to_s3:
  stage: upload
  image: amazon/aws-cli:latest
  dependencies:
    - package_configs
    - extract_module_info
  script:
    - echo "Caricamento delle configurazioni su S3..."
    # Verifica che le variabili necessarie siano disponibili
    - echo "Utilizzo bucket S3: $S3_BUCKET"
    - echo "Nome modulo: $MODULE_NAME"
    - echo "Versione: $VERSION"

    # Elenca i file nella directory dist per verifica
    - ls -la dist/

    # Specifica esplicitamente la regione AWS
    - aws configure set region $AWS_DEFAULT_REGION

    # Carica i file su S3 con comando più esplicito
    - aws s3 cp dist/ s3://$S3_BUCKET/$MODULE_NAME/$VERSION/ --recursive

    # Crea il file latest.json
    - echo "{\"latestVersion\": \"$VERSION\", \"updateTime\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > latest.json
    - cat latest.json

    # Carica il file latest.json
    - aws s3 cp latest.json s3://$S3_BUCKET/$MODULE_NAME/latest.json

    - echo "Configurazioni caricate con successo!"
  only:
    - develop
    - main

deploy_to_sit:
  stage: deploy_configs
  image: alpine:latest
  dependencies:
    - extract_module_info
  before_script:
    - apk update && apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    # Verifica che le variabili necessarie siano definite
    - if [ -z "$EC2_HOST" ]; then echo "EC2_HOST non definito"; exit 1; fi
    - if [ -z "$EC2_PRIVATE_KEY" ]; then echo "EC2_PRIVATE_KEY non definito"; exit 1; fi
    - if [ -z "$EC2_USER" ]; then echo "EC2_USER non definito"; exit 1; fi
    # Configura la chiave privata per SSH
    - echo "$EC2_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - if [ ! -s ~/.ssh/id_rsa ]; then echo "La chiave privata SSH è vuota"; exit 1; fi
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Aggiornamento delle configurazioni sull'ambiente SIT..."

    # Crea uno script di aggiornamento delle configurazioni
    - |
      cat > update_configs.sh << 'EOF'
      #!/bin/bash
      set -e
      
      # Aggiorna il repository locale
      cd ~/auxdromos
      git pull
      
      # Applica eventuali modifiche di configurazione
      echo "Configurazioni aggiornate con successo!"
      EOF

    # Copia ed esegui lo script
    - scp update_configs.sh $EC2_USER@$EC2_HOST:/tmp/
    - ssh $EC2_USER@$EC2_HOST 'bash /tmp/update_configs.sh'

    - echo "Configurazioni aggiornate su SIT con successo!"
  only:
    - develop
  environment:
    name: sit