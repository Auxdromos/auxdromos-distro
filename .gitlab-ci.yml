include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

image: alpine:latest

stages:
  - prepare
  - test
  - package
  - upload
  - deploy_configs

extract_module_info:
  stage: prepare
  script:
    - echo "Estrazione delle informazioni del modulo di distribuzione..."
    - |
      if [ -f "pom.xml" ]; then
        # Installa strumenti necessari
        apk add --no-cache grep sed
      
        export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
        export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      else
        # Usa un nome predefinito se non c'è un pom.xml
        export MODULE_NAME="auxdromos-configs"
        export VERSION="1.0.0-${CI_COMMIT_SHORT_SHA}"
      fi
    - echo "MODULE_NAME=$MODULE_NAME" >> module_info.env
    - echo "VERSION=$VERSION" >> module_info.env
    - 'echo "Modulo: $MODULE_NAME, Versione: $VERSION"'
  artifacts:
    reports:
      dotenv: module_info.env

package_configs:
  stage: package
  script:
    - echo "Creazione del pacchetto di configurazione $MODULE_NAME versione $VERSION..."
    - apk add --no-cache zip
    - mkdir -p dist
    - 'zip -r dist/$MODULE_NAME-$VERSION.zip aws/ docker/ scripts/ env/ *.yml *.yaml *.properties || echo "Nota: alcuni file potrebbero non esistere"'
    - 'echo "{\"moduleName\": \"$MODULE_NAME\", \"version\": \"$VERSION\", \"buildDate\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"branch\": \"$CI_COMMIT_REF_NAME\", \"commitHash\": \"$CI_COMMIT_SHA\"}" > dist/manifest.json'
  dependencies:
    - extract_module_info
  artifacts:
    paths:
      - dist/

upload_to_s3:
  stage: upload
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - package_configs
    - extract_module_info
  script:
    - set -x
    # Visualizza variabili di ambiente di base
    - echo "DEBUG AWS_DEFAULT_REGION ${AWS_DEFAULT_REGION}"
    - echo "DEBUG S3_BUCKET ${S3_BUCKET_NAME}"
    # Verifica la presenza del file dotenv e il suo contenuto
    - echo "DEBUG Listing current directory"
    - echo "DEBUG Contenuto di module_info.env (se presente)"
    - if [ -f module_info.env ]; then cat module_info.env; else echo "module_info.env non trovato"; fi
    # In ogni caso, se non sono già impostate, source il file
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "DEBUG MODULE_NAME ${MODULE_NAME}"
    - echo "DEBUG VERSION ${VERSION}"
    - aws configure set region ${AWS_DEFAULT_REGION}
    - echo "DEBUG Esecuzione comando aws s3 cp dist/ s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/ --recursive"
    - aws s3 cp dist/ s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/ --recursive
    - echo "{\"latestVersion\":\"${VERSION}\",\"updateTime\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > latest.json
    - echo "DEBUG Esecuzione comando aws s3 cp latest.json s3://${S3_BUCKET_NAME}/${MODULE_NAME}/latest.json"
    - aws s3 cp latest.json s3://${S3_BUCKET_NAME}/${MODULE_NAME}/latest.json
    - echo "Configurazioni caricate con successo!"
  only:
    - develop
    - main

deploy_to_sit:
  stage: deploy_configs
  image: alpine:latest
  dependencies:
    - extract_module_info
  before_script:
    - apk update && apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - if [ -z "$EC2_HOST" ]; then echo "EC2_HOST non definito"; exit 1; fi
    - if [ -z "$EC2_PRIVATE_KEY" ]; then echo "EC2_PRIVATE_KEY non definito"; exit 1; fi
    - if [ -z "$EC2_USER" ]; then echo "EC2_USER non definito"; exit 1; fi
    - echo "$EC2_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - if [ ! -s ~/.ssh/id_rsa ]; then echo "La chiave privata SSH è vuota"; exit 1; fi
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts || true
  script:
    - echo "Aggiornamento delle configurazioni sull'ambiente SIT..."
    - echo "#!/bin/bash" > update_configs.sh
    - echo "set -e" >> update_configs.sh
    - echo "cd ~/auxdromos" >> update_configs.sh
    - echo "git pull" >> update_configs.sh
    - echo "echo \"Configurazioni aggiornate con successo!\"" >> update_configs.sh
    - scp update_configs.sh $EC2_USER@$EC2_HOST:/tmp/
    - ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "bash /tmp/update_configs.sh"
    - echo "Configurazioni aggiornate su SIT con successo!"
  only:
    - develop
  environment:
    name: sit

