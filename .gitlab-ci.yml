include:
  - project: 'auxdromos/auxdromos-distro'
    file: 'aws/sit/gitlab-ci/.gitlab-ci-template.yml'

deploy_distro:
  stage: deploy_sit
  image: amazon/aws-cli:latest
  only:
    - /^distro$/   # Esegue questo job solo se il branch corrisponde a "distro"
  when: on_success  # Esecuzione automatica in caso di successo degli stage precedenti
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Deployment del modulo *distro* versione $VERSION in ambiente SIT (non eseguito sotto docker)..."
    - echo "Controllo che esista la cartella aws/sit/script:"
    - ls -la aws/sit/script
    - echo "Utilizzo script deploy_module.sh dal repository..."
    - cp aws/sit/script/deploy_module.sh deploy_module.sh
    - chmod +x deploy_module.sh
    # Carica lo script in S3 nella cartella della versione, in modo che rimanga disponibile fino a un nuovo deploy
    - aws s3 cp deploy_module.sh "s3://${S3_BUCKET_NAME}/distro/${VERSION}/deploy_module.sh"
    # Ottieni gli ID delle istanze target tramite tag (assicurati che le istanze abbiano i tag corretti)
    - |
      INSTANCE_IDS=$(aws ec2 describe-instances \
         --filters "Name=tag:Environment,Values=SIT" "Name=tag:Application,Values=auxdromos" "Name=instance-state-name,Values=running" \
         --query "Reservations[*].Instances[*].InstanceId" \
         --output text)
      if [ -z "$INSTANCE_IDS" ]; then
        echo "ERRORE: Nessuna istanza EC2 trovata con i tag specificati!"
        exit 1
      fi
      echo "Istanze target trovate: $INSTANCE_IDS"
    # Copia lo script sulle istanze via SSM
    - aws ssm send-command \
      --document-name "AWS-RunShellScript" \
      --targets "Key=instanceids,Values=$INSTANCE_IDS" \
      --parameters '{"commands":["aws s3 cp s3://'${S3_BUCKET_NAME}'/distro/'${VERSION}'/deploy_module.sh /tmp/deploy_module.sh","chmod +x /tmp/deploy_module.sh","/tmp/deploy_module.sh '${MODULE_NAME}' '${VERSION}'"]}' \
      --output text
    - echo "Il file deploy_module.sh Ã¨ ora disponibile sulla istanza."