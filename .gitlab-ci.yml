image: alpine:latest

stages:
  - prepare
  - check_version
  - build
  - test
  - package
  - upload_to_s3

extract_module_info:
  stage: prepare
  script:
    - echo "Estrazione delle informazioni del modulo di distribuzione..."
    - apk add --no-cache grep sed
    - |
      if [ -f "pom.xml" ]; then
        export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
        export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      else
        # Se non c'è un pom.xml, assegna un nome di default e una versione basata sullo short SHA
        export MODULE_NAME="auxdromos-distro"
        export VERSION="1.0.0-${CI_COMMIT_SHORT_SHA}"
      fi

    - echo "MODULE_NAME=$MODULE_NAME" >> module_info.env
    - echo "VERSION=$VERSION" >> module_info.env
    - echo "Modulo $MODULE_NAME, Versione $VERSION"
  artifacts:
    reports:
      dotenv: module_info.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_info
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  only:
    - main
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    # Carichiamo VERSION dal file .env creato prima - CORRETTO IL NOME DEL FILE
    if [ -f module_info.env ]; then
      . module_info.env
    fi

    # Vietiamo l'uso di SNAPSHOT in main
    if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
      echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
      exit 1
    fi

    # Verifichiamo se questa versione esiste già in ECR
    if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
      echo "Errore: La versione '$VERSION' è già presente su ECR."
      exit 1
    fi

    # Corretto il controllo su S3 per uniformità con l'altro file
    FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" 2>/dev/null | wc -l || echo 0)

    echo "DEBUG FOUND = $FOUND" # Aggiunto per debug

    if [[ "$FOUND" -gt 0 ]]; then
        echo "Versione già presente su S3. Interrompo la pipeline."
        exit 1
    else
        echo "Versione non presente su S3. Procedo..."
    fi

build:
  stage: build
  image: maven:3.9.9-amazoncorretto-17  # Usa l'immagine Maven appropriata
  dependencies:
    - extract_module_info
    - check_version
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
    # Crea un file manifest che descrive questa build
    - |
      cat > target/build-info.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  artifacts:
    paths:
      - target/*.jar
      - target/distribution/
      - target/build-info.json

test:
  stage: test
  image: maven:3.9.9-amazoncorretto-17
  dependencies:
    - extract_module_info
    - build
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

package_configs:
  stage: package
  script:
    - set -x
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Creazione pacchetto di configurazione $MODULE_NAME versione $VERSION..."
    - apk add --no-cache zip
    - mkdir -p dist
    - zip -r "dist/$MODULE_NAME-$VERSION.zip" aws/ docker/ scripts/ env/ *.yml *.yaml *.properties || echo "Nessun file da includere"
    - echo "{\"moduleName\":\"$MODULE_NAME\",\"version\":\"$VERSION\",\"buildDate\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"branch\":\"$CI_COMMIT_REF_NAME\",\"commitHash\":\"$CI_COMMIT_SHA\"}" > dist/manifest.json
  dependencies:
    - extract_module_info
    - check_version
  artifacts:
    paths:
      - dist/
  only:
    - develop
    - main

upload_to_s3:
  stage: upload_to_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - package_configs
    - extract_module_info
  only:
    - main
  script:
    - set -ex
    # Carica module_info.env se presente
    - if [ -f module_info.env ]; then . module_info.env; fi

    # Controllo che le variabili SSH siano settate
    - if [ -z "$EC2_HOST" ]; then echo "EC2_HOST non definito!"; exit 1; fi
    - if [ -z "$EC2_USER" ]; then echo "EC2_USER non definito!"; exit 1; fi
    - if [ -z "$EC2_PRIVATE_KEY" ]; then echo "EC2_PRIVATE_KEY non definito!"; exit 1; fi

    # Log di debug
    - echo "Caricamento artefatti per $MODULE_NAME versione $VERSION..."

    # Determina il percorso base su S3
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        S3_PATH="s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/"
      else
        S3_PATH="s3://${S3_BUCKET_NAME}/develop/${MODULE_NAME}/${VERSION}/"
      fi
      echo "Caricamento su $S3_PATH..."

    # Carichiamo i file di configurazione impacchettati su S3
    - aws s3 cp "dist/$MODULE_NAME-$VERSION.zip" "${S3_PATH}" --acl bucket-owner-full-control
    - aws s3 cp "dist/manifest.json" "${S3_PATH}" --acl bucket-owner-full-control

    # Aggiungiamo un marcatore "latest"
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        aws s3 cp "${S3_PATH}$MODULE_NAME-$VERSION.zip" "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/latest/$MODULE_NAME-latest.zip" --acl bucket-owner-full-control
        aws s3 cp "${S3_PATH}manifest.json" "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/latest/manifest.json" --acl bucket-owner-full-control
      else
        aws s3 cp "${S3_PATH}$MODULE_NAME-$VERSION.zip" "s3://${S3_BUCKET_NAME}/develop/${MODULE_NAME}/latest/$MODULE_NAME-latest.zip" --acl bucket-owner-full-control
        aws s3 cp "${S3_PATH}manifest.json" "s3://${S3_BUCKET_NAME}/develop/${MODULE_NAME}/latest/manifest.json" --acl bucket-owner-full-control
      fi

    # Installiamo SSH client per connetterci a SIT (l'immagine Amazon CLI potrebbe usare yum, microdnf, o simile)
    - yum install -y openssh-clients || microdnf install -y openssh-clients || echo "Attenzione impossibile installare openssh-clients"

    # Prepariamo la chiave SSH
    - mkdir -p ~/.ssh
    - echo "$EC2_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Aggiungiamo l'host alla lista dei known_hosts
    - echo "Aggiungo host $EC2_HOST"
    - ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

    # Creiamo la directory di destinazione su EC2, se non esiste
    - ssh "$EC2_USER@$EC2_HOST" "mkdir -p /opt/auxdromos/$MODULE_NAME/$VERSION"

    # Copiamo gli artefatti
    - scp "dist/$MODULE_NAME-$VERSION.zip" "$EC2_USER@$EC2_HOST:/opt/auxdromos/$MODULE_NAME/$VERSION/"
    - scp "dist/manifest.json" "$EC2_USER@$EC2_HOST:/opt/auxdromos/$MODULE_NAME/$VERSION/"

    # Aggiorniamo il link "latest" su EC2
    - ssh "$EC2_USER@$EC2_HOST" "rm -f /opt/auxdromos/$MODULE_NAME/latest && ln -sf /opt/auxdromos/$MODULE_NAME/$VERSION /opt/auxdromos/$MODULE_NAME/latest"

    - echo "Artefatti caricati con successo su S3 e sull'istanza EC2 di SIT"
