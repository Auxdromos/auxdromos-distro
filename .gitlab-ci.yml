include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - local: aws/sit/gitlab-ci/.gitlab-ci-template.yml

image: alpine:latest

stages:
  - prepare
  - check_version
  - build         # Aggiunto per supportare i job dal template
  - test
  - package
  - artifact_upload_s3  # Aggiunto per supportare i job dal template
  - build_docker        # Aggiunto per supportare i job dal template
  - upload
  - deploy_sit          # Aggiunto per supportare i job dal template
  - deploy_configs

extract_module_info:
  stage: prepare
  script:
    - echo "Estrazione delle informazioni del modulo di distribuzione..."
    - apk add --no-cache grep sed
    - |
      if [ -f "pom.xml" ]; then
        export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
        export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      else
        # Se non c'è un pom.xml, assegna un nome di default e una versione basata sullo short SHA
        export MODULE_NAME="auxdromos-distro"
        export VERSION="1.0.0-${CI_COMMIT_SHORT_SHA}"
      fi

    - echo "MODULE_NAME=$MODULE_NAME" >> module_info.env
    - echo "VERSION=$VERSION" >> module_info.env
    - echo "Modulo $MODULE_NAME, Versione $VERSION"
  artifacts:
    reports:
      dotenv: module_info.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_info
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  only:
    - main
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    # Carichiamo VERSION dal file .env creato prima - CORRETTO IL NOME DEL FILE
    if [ -f module_info.env ]; then
      . module_info.env
    fi

    # Vietiamo l'uso di SNAPSHOT in main
    if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
      echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
      exit 1
    fi

    # Verifichiamo se questa versione esiste già in ECR
    if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
      echo "Errore: La versione '$VERSION' è già presente su ECR."
      exit 1
    fi

    # Corretto il controllo su S3 per uniformità con l'altro file
    FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" 2>/dev/null | wc -l || echo 0)

    echo "DEBUG FOUND = $FOUND" # Aggiunto per debug

    if [[ "$FOUND" -gt 0 ]]; then
        echo "Versione già presente su S3. Interrompo la pipeline."
        exit 1
    else
        echo "Versione non presente su S3. Procedo..."
    fi

test_project:
  stage: test
  script:
    - set -x
    - echo "Esecuzione test / validazioni..."
    - echo "Ad esempio, puoi controllare sintassi di file .yml, .properties, ecc."
  needs:
    - extract_module_info
    - check_version
  only:
    - develop
    - main

package_configs:
  stage: package
  script:
    - set -x
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Creazione pacchetto di configurazione $MODULE_NAME versione $VERSION..."
    - apk add --no-cache zip
    - mkdir -p dist
    - zip -r "dist/$MODULE_NAME-$VERSION.zip" aws/ docker/ scripts/ env/ *.yml *.yaml *.properties || echo "Nessun file da includere"
    - echo "{\"moduleName\":\"$MODULE_NAME\",\"version\":\"$VERSION\",\"buildDate\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"branch\":\"$CI_COMMIT_REF_NAME\",\"commitHash\":\"$CI_COMMIT_SHA\"}" > dist/manifest.json
  dependencies:
    - extract_module_info
    - check_version
  artifacts:
    paths:
      - dist/
  only:
    - develop
    - main

upload_to_s3:
  stage: upload
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - package_configs
    - extract_module_info
    - check_version
  script:
    - set -x
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "DEBUG MODULE_NAME=$MODULE_NAME, VERSION=$VERSION"
    - aws configure set region "${AWS_DEFAULT_REGION}"
    - echo "Caricamento su S3 in s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/"
    - aws s3 cp dist/ "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" --recursive