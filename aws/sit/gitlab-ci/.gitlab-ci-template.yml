image: maven:3.9.9-amazoncorretto-17

stages:
  - prepare
  - check_version
  - build
  - test
  - package
  - upload_to_s3
  - tag_latest
  - deploy_sit

extract_module_info:
  stage: prepare
  script:
    - echo "Estrazione delle informazioni del modulo di distribuzione..."
    - apk add --no-cache grep sed
    - |
      if [ -f "pom.xml" ]; then
        export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
        export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      else
        # Se non c'è un pom.xml, assegna un nome di default e una versione basata sullo short SHA
        export MODULE_NAME="auxdromos-distro"
        export VERSION="1.0.0-${CI_COMMIT_SHORT_SHA}"
      fi

    - echo "MODULE_NAME=$MODULE_NAME" >> module_info.env
    - echo "VERSION=$VERSION" >> module_info.env
    - echo "Modulo $MODULE_NAME, Versione $VERSION"
  artifacts:
    reports:
      dotenv: module_info.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_info
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  only:
    - main
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    # Carichiamo VERSION dal file .env creato prima - CORRETTO IL NOME DEL FILE
    if [ -f module_info.env ]; then
      . module_info.env
    fi

    # Vietiamo l'uso di SNAPSHOT in main
    if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
      echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
      exit 1
    fi

    # Verifichiamo se questa versione esiste già in ECR
    if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
      echo "Errore: La versione '$VERSION' è già presente su ECR."
      exit 1
    fi

    # Corretto il controllo su S3 per uniformità con l'altro file
    FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" 2>/dev/null | wc -l || echo 0)

    echo "DEBUG FOUND = $FOUND" # Aggiunto per debug

    if [[ "$FOUND" -gt 0 ]]; then
        echo "Versione già presente su S3. Interrompo la pipeline."
        exit 1
    else
        echo "Versione non presente su S3. Procedo..."
    fi


build:
  stage: build
  image: maven:3.9.9-amazoncorretto-17  # Usa l'immagine Maven appropriata
  dependencies:
    - extract_module_info
    - check_version
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
    # Crea un file manifest che descrive questa build
    - |
      cat > target/build-info.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  artifacts:
    paths:
      - target/*.jar
      - target/distribution/
      - target/build-info.json

test:
  stage: test
  image: maven:3.9.9-amazoncorretto-17
  dependencies:
    - extract_module_info
    - build
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

package_configs:
  stage: package
  script:
    - set -x
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Creazione pacchetto di configurazione $MODULE_NAME versione $VERSION..."
    - apk add --no-cache zip
    - mkdir -p dist
    - zip -r "dist/$MODULE_NAME-$VERSION.zip" aws/ docker/ scripts/ env/ *.yml *.yaml *.properties || echo "Nessun file da includere"
    - echo "{\"moduleName\":\"$MODULE_NAME\",\"version\":\"$VERSION\",\"buildDate\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"branch\":\"$CI_COMMIT_REF_NAME\",\"commitHash\":\"$CI_COMMIT_SHA\"}" > dist/manifest.json
  dependencies:
    - extract_module_info
    - check_version
  artifacts:
    paths:
      - dist/
  only:
    - develop
    - main

upload_to_s3:
  stage: upload_to_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - package_configs
    - extract_module_info
  script: |
    set -e
    set -o pipefail
    
    if [ -f module_info.env ]; then
      source module_info.env
    fi
    
    echo "Caricamento del pacchetto su S3 per $MODULE_NAME versione $VERSION"
    
    # Determina il percorso S3 in base al branch
    if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
      S3_PATH="s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/"
    else
      S3_PATH="s3://${S3_BUCKET_NAME}/develop/${MODULE_NAME}/${VERSION}/"
    fi
    
    # Carica i file
    aws s3 cp dist/ $S3_PATH --recursive
    
    echo "Caricamento su S3 completato al percorso: $S3_PATH"


tag_latest:
  stage: tag_latest
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - upload_to_s3
    - extract_module_info
  script: |
    if [ -f module_info.env ]; then
      source module_info.env
    fi
    
    echo "Aggiornando tag 'latest' per $MODULE_NAME"
    
    # Determina i percorsi S3 in base al branch
    if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
      SOURCE_PATH="s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/"
    
      # Copia il file ZIP della versione specifica come "latest"
      aws s3 cp "${SOURCE_PATH}${MODULE_NAME}-${VERSION}.zip" "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${MODULE_NAME}-latest.zip"
    
      echo "Tag latest aggiornato con successo per la versione stabile $VERSION"
    else
      SOURCE_PATH="s3://${S3_BUCKET_NAME}/develop/${MODULE_NAME}/${VERSION}/"
    
      # Per i branch di sviluppo, aggiorniamo un tag "develop-latest"
      aws s3 cp "${SOURCE_PATH}${MODULE_NAME}-${VERSION}.zip" "s3://${S3_BUCKET_NAME}/develop/${MODULE_NAME}/${MODULE_NAME}-develop-latest.zip"
    
      echo "Tag develop-latest aggiornato con successo per la versione $VERSION"
    fi
  only:
    - main

deploy_sit:
  stage: deploy_sit
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - extract_module_info
  tags:
    - ec2-deploy  # Questo tag indica di eseguire su un runner specifico sull'istanza EC2
  script: |
    set -e
    set -o pipefail
    
    # Carichiamo i valori delle variabili dal file .env
    if [ -f module_name.env ]; then
      source module_name.env
    fi
    
    echo "Inizio deploy del modulo $MODULE_NAME versione $VERSION su SIT..."
    
    # Crea directory di lavoro
    DEPLOY_DIR="/tmp/deploy-$MODULE_NAME-$VERSION"
    mkdir -p $DEPLOY_DIR
    cd $DEPLOY_DIR
    
    # Scarica la distro più recente da S3
    echo "Scarico l'ultima versione della distribuzione da S3..."
    aws s3 cp "s3://${S3_BUCKET_NAME}/auxdromos-distro/" ./ --recursive --include "*latest.zip" || {
      echo "Errore durante il download della distribuzione"
      exit 1
    }
    
    # Estrai il file zip della distribuzione
    DISTRO_ZIP=$(ls auxdromos-distro-*.zip | sort -V | tail -n 1)
    echo "Estrazione del file $DISTRO_ZIP..."
    unzip -o $DISTRO_ZIP
    
    # Imposta le variabili di ambiente per il deploy
    export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
    export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    
    # Esegui lo script di deploy per questo modulo
    echo "Esecuzione dello script deploy_module.sh per il modulo $MODULE_NAME..."
    bash ./scripts/deploy_module.sh $MODULE_NAME
    
    echo "Deploy completato con successo!"
  environment:
    name: sit
  only:
    - main

