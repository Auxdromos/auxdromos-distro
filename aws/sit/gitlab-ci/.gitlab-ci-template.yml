image: maven:3.9.9-amazoncorretto-17

stages:
  - prepare
  - check_version
  - build
  - test
  - package
  - upload_to_s3
  - tag_latest
  - deploy_sit

extract_module_info:
  stage: prepare
  script:
    - echo "Estrazione delle informazioni del modulo di distribuzione..."
    # Rimuovi apk add e usa i comandi che sono già disponibili in maven:amazoncorretto
    # grep e sed sono già installati nell'immagine Maven
    - |
      if [ -f "pom.xml" ]; then
        export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
        export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      else
        # Se non c'è un pom.xml, assegna un nome di default e una versione basata sullo short SHA
        export MODULE_NAME="auxdromos-distro"
        export VERSION="1.0.0-${CI_COMMIT_SHORT_SHA}"
      fi

    - echo "MODULE_NAME=$MODULE_NAME" >> module_info.env
    - echo "VERSION=$VERSION" >> module_info.env
    - echo "Modulo $MODULE_NAME, Versione $VERSION"
    # Aggiungi un comando per verificare che il file esista e mostrarne il contenuto
    - ls -la module_info.env
    - cat module_info.env
  artifacts:
    reports:
      dotenv: module_info.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_info
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    # Carichiamo VERSION dal file .env creato prima
    if [ -f module_info.env ]; then
      . module_info.env
    fi

    # Per il branch main
    if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
      # Vietiamo l'uso di SNAPSHOT in main
      if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
        echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
        exit 1
      fi
    
      # Verifichiamo solo su ECR, non su S3
      if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
        echo "Errore: La versione '$VERSION' è già presente su ECR."
        exit 1
      fi
    else
      # Per tutti gli altri branch, controlla sia ECR che S3
      if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
        echo "Errore: La versione '$VERSION' è già presente su ECR."
        exit 1
      fi

      FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" 2>/dev/null | wc -l || echo 0)
      echo "DEBUG FOUND = $FOUND"

      if [[ "$FOUND" -gt 0 ]]; then
          echo "Versione già presente su S3. Interrompo la pipeline."
          exit 1
      else
          echo "Versione non presente su S3. Procedo..."
      fi
    fi

build:
  stage: build
  image: maven:3.9.9-amazoncorretto-17  # Usa l'immagine Maven appropriata
  dependencies:
    - extract_module_info
    - check_version
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
    # Crea un file manifest che descrive questa build
    - |
      cat > target/build-info.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  artifacts:
    paths:
      - target/*.jar
      - target/distribution/
      - target/build-info.json

test:
  stage: test
  image: maven:3.9.9-amazoncorretto-17
  dependencies:
    - extract_module_info
    - build
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

package_configs:
  stage: package
  image: alpine:latest  # Usa Alpine Linux (molto leggera)
  script:
    - set -x
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Creazione pacchetto di configurazione $MODULE_NAME versione $VERSION..."

    # Installa zip in Alpine
    - apk add --no-cache zip

    # Il resto del tuo script
    - mkdir -p dist
    - |
      FILES_TO_ZIP=""
      for DIR in aws docker scripts env; do
        if [ -d "$DIR" ]; then
          FILES_TO_ZIP="$FILES_TO_ZIP $DIR/"
          echo "Aggiungo directory $DIR al ZIP"
        fi
      done
      
      for EXT in yml yaml properties; do
        if ls *.$EXT 1>/dev/null 2>&1; then
          FILES_TO_ZIP="$FILES_TO_ZIP *.$EXT"
          echo "Aggiungo file *.$EXT al ZIP"
        fi
      done
      
      if [ -n "$FILES_TO_ZIP" ]; then
        echo "Creazione ZIP con: $FILES_TO_ZIP"
        zip -r "dist/$MODULE_NAME-$VERSION.zip" $FILES_TO_ZIP
      else
        echo "AVVISO: Nessun file trovato da includere nel ZIP"
        touch empty.txt
        zip -r "dist/$MODULE_NAME-$VERSION.zip" empty.txt
        rm empty.txt
      fi

    - echo "{\"moduleName\":\"$MODULE_NAME\",\"version\":\"$VERSION\",\"buildDate\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"branch\":\"$CI_COMMIT_REF_NAME\",\"commitHash\":\"$CI_COMMIT_SHA\"}" > dist/manifest.json
  dependencies:
    - extract_module_info
    - check_version
  artifacts:
    paths:
      - dist/

upload_to_s3:
  stage: upload_to_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Caricamento artefatti su S3 per $MODULE_NAME versione $VERSION"

    # Verifica che i file esistano nella directory dist/
    - ls -la dist/

    # Verifica esplicitamente l'esistenza del file ZIP (con sintassi corretta)
    - |
      if [ ! -f "dist/$MODULE_NAME-$VERSION.zip" ]; then
        echo "ERRORE: File ZIP non trovato in dist/$MODULE_NAME-$VERSION.zip"
        exit 1
      fi

    - echo "Carico il file da dist/$MODULE_NAME-$VERSION.zip a s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/$MODULE_NAME-$VERSION.zip"

    # Caricamento del file ZIP
    - aws s3 cp "dist/$MODULE_NAME-$VERSION.zip" "s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/$MODULE_NAME-$VERSION.zip"

    # Caricamento del manifest
    - aws s3 cp "dist/manifest.json" "s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/manifest.json"

    # Verifica che i file siano stati caricati su S3
    - aws s3 ls "s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/" --recursive
  dependencies:
    - extract_module_info
    - package_configs

tag_latest:
  stage: tag_latest
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Aggiornando tag 'latest' per $MODULE_NAME"

    # Elenco i file disponibili nel bucket
    - echo "Contenuto della directory $MODULE_NAME/$VERSION/ su S3:"
    - aws s3 ls "s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/" --recursive

    # Verifica se il file ZIP esiste
    - >
      if aws s3 ls "s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/$MODULE_NAME-$VERSION.zip" >/dev/null 2>&1; then
        echo "File ZIP trovato, procedo con l'aggiornamento del tag 'latest'"
        aws s3 cp "s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/$MODULE_NAME-$VERSION.zip" "s3://${S3_BUCKET_NAME}/$MODULE_NAME/latest/$MODULE_NAME-latest.zip"
        aws s3 cp "s3://${S3_BUCKET_NAME}/$MODULE_NAME/$VERSION/manifest.json" "s3://${S3_BUCKET_NAME}/$MODULE_NAME/latest/manifest.json"
        echo "Tag latest aggiornato con successo."
      else
        echo "ERRORE: File ZIP $MODULE_NAME-$VERSION.zip non trovato su S3."
        echo "Il manifest.json è stato caricato, ma il file ZIP è mancante."
        echo "Verifica il job package_configs e upload_to_s3 per risolvere il problema."
        exit 1
      fi
  dependencies:
    - extract_module_info
    - upload_to_s3
  only:
    - main

deploy_sit:
  stage: deploy_sit
  image: alpine:latest
  dependencies:
    - extract_module_info
  timeout: 15m
  before_script:
    - apk add --no-cache openssh-client bash aws-cli
    - mkdir -p ~/.ssh
    - echo "$EC2_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - set -e
    - echo "Deploying module: $MODULE_NAME"
    - if [ -f module_info.env ]; then . module_info.env; fi
    - |
      if [ "$MODULE_NAME" = "auxdromos-distro" ]; then
        echo "Module distro: downloading artifact from S3 and uploading to EC2 (without executing the deploy script)"
        mkdir -p /tmp/${MODULE_NAME}
        aws s3 cp "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" /tmp/${MODULE_NAME}/ --recursive
        ssh ${EC2_USER}@${EC2_HOST} "mkdir -p /app/${MODULE_NAME}/artifacts/"
        scp -r /tmp/${MODULE_NAME}/* ${EC2_USER}@${EC2_HOST}:/app/${MODULE_NAME}/artifacts/
        echo "${MODULE_NAME}-${VERSION}" > /tmp/current-version.txt
        scp /tmp/current-version.txt ${EC2_USER}@${EC2_HOST}:/app/${MODULE_NAME}/current-version.txt
        echo "Skipping deploy script execution for module distro"
      else
        echo "Non-distro module: executing the deploy script on EC2"
        ssh ${EC2_USER}@${EC2_HOST} "if [ -f /app/${MODULE_NAME}/deploy.sh ]; then cd /app/${MODULE_NAME} && ./deploy.sh; else echo 'No deploy script found'; fi"
      fi
    - echo "Deployment completed for $MODULE_NAME"
  only:
    - main

