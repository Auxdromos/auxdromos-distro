image: maven:3.9.9-amazoncorretto-17

stages:
  - prepare
  - check_version
  - build
  - test
  - artifact_upload_s3
  - build_docker
  - deploy_sit

# Inclusione eventuale di template GitLab per scanning o altro
include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

extract_module_name:
  stage: prepare
  script: |
    echo "Estrazione del MODULE_NAME dal pom.xml..."
    export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    if [ -z "$MODULE_NAME" ]; then 
      echo "Errore: impossibile estrarre MODULE_NAME dal pom.xml"
      exit 1
    fi
    echo "MODULE_NAME estratto: $MODULE_NAME"
    echo "MODULE_NAME=$MODULE_NAME" >> module_name.env
    
    # Estrai anche la versione
    export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    echo "VERSION=$VERSION" >> module_name.env
    echo "VERSION estratta: $VERSION"
  artifacts:
    reports:
      dotenv: module_name.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_name
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  only:
    - main
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    # Carichiamo VERSION dal file .env creato prima
    if [ -f module_name.env ]; then
      . module_name.env
    fi

    # Vietiamo l'uso di SNAPSHOT in main
    if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
      echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
      exit 1
    fi

    # Verifichiamo se questa versione esiste già in ECR
    if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
      echo "Errore: La versione '$VERSION' è già presente su ECR."
      exit 1
    fi

    # Corretto il controllo su S3 per evitare errori
    FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" 2>/dev/null | wc -l || echo 0)

    echo "DEBUG FOUND = $FOUND"

    if [[ "$FOUND" -gt 0 ]]; then
        echo "Versione già presente su S3. Interrompo la pipeline."
        exit 1
    else
        echo "Versione non presente su S3. Procedo..."
    fi

build:
  stage: build
  dependencies:
    - extract_module_name
    - check_version
  script:
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
    # Crea un file manifest che descrive questa build
    - |
      cat > target/build-info.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  artifacts:
    paths:
      - target/*.jar
      - target/distribution/
      - target/build-info.json

test:
  stage: test
  dependencies:
    - extract_module_name
    - build
  script:
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

artifact_upload_s3:
  stage: artifact_upload_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - build
    - extract_module_name
    - check_version
  script:
    - |
      echo "Caricamento degli artefatti su S3..."
      
      ARTIFACT_DIR="$MODULE_NAME/$VERSION"
      
      # Carica i JAR
      JARS=$(find target -name "*.jar" -type f)
      for jar in $JARS; do
        aws s3 cp "$jar" "s3://$S3_BUCKET_NAME/$ARTIFACT_DIR/$(basename $jar)"
      done
      
      # Carica build-info.json
      aws s3 cp target/build-info.json "s3://$S3_BUCKET_NAME/$ARTIFACT_DIR/build-info.json"
      
      # Carica directory di distribuzione se presente
      if [ -d "target/distribution" ]; then
        aws s3 cp target/distribution/ "s3://$S3_BUCKET_NAME/$ARTIFACT_DIR/distribution/" --recursive
      fi