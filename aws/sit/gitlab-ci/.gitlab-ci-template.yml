image: maven:3.9.9-amazoncorretto-17

stages:
  - prepare
  - check_version
  - build
  - test
  - artifact_upload_s3
  - build_docker
  - deploy_sit

# Inclusione eventuale di template GitLab per scanning o altro
include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

extract_module_name:
  stage: prepare
  script: |
    echo "Estrazione del MODULE_NAME dal pom.xml..."
    export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    if [ -z "$MODULE_NAME" ]; then 
      echo "Errore: impossibile estrarre MODULE_NAME dal pom.xml"
      exit 1
    fi
    echo "MODULE_NAME estratto: $MODULE_NAME"
    echo "MODULE_NAME=$MODULE_NAME" >> module_name.env
    
    # Estrai anche la versione
    export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    echo "VERSION=$VERSION" >> module_name.env
    echo "VERSION estratta: $VERSION"
  artifacts:
    reports:
      dotenv: module_name.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_name
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  only:
    - main
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    # Carichiamo VERSION dal file .env creato prima
    if [ -f module_name.env ]; then
      . module_name.env
    fi


    # Vietiamo l’uso di SNAPSHOT in main
    if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
      echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
      exit 1
    fi

    # Verifichiamo se questa versione esiste già in ECR
    if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
      echo "Errore: La versione '$VERSION' è già presente su ECR."
      exit 1
    else
      echo "Versione non ancora presente su ECR, procedo..."
    fi

build:
  stage: build
  dependencies:
    - extract_module_name
    - check_version
  script:
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
    # Crea un file manifest che descrive questa build
    - |
      cat > target/build-info.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  artifacts:
    paths:
      - target/*.jar
      - target/distribution/
      - target/build-info.json

test:
  stage: test
  dependencies:
    - extract_module_name
    - build
  script:
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

artifact_upload_s3:
  stage: artifact_upload_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - build
    - extract_module_name
    - check_version
  script:
    - |
      echo "Caricamento degli artefatti su S3..."
      
      ARTIFACT_DIR="$MODULE_NAME/$VERSION"
      
      # Carica i JAR
      JARS=$(find target -name "*.jar" -type f)
      for jar in $JARS; do
        aws s3 cp "$jar" "s3://$S3_BUCKET/$ARTIFACT_DIR/$(basename $jar)"
      done
      
      # Carica build-info.json
      aws s3 cp target/build-info.json "s3://$S3_BUCKET/$ARTIFACT_DIR/build-info.json"
      
      # Carica directory di distribuzione se presente
      if [ -d "target/distribution" ]; then
        aws s3 cp target/distribution/ "s3://$S3_BUCKET/$ARTIFACT_DIR/distribution/" --recursive
      fi
      
      # Crea/aggiorna anche un marker "latest"
      echo "{\"latestVersion\": \"$VERSION\", \"updateTime\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > latest.json
      aws s3 cp latest.json "s3://$S3_BUCKET/$MODULE_NAME/latest.json"
      
      # Mantenere max 5 versioni su S3 (opzionale)
      LIST=$(aws s3 ls "s3://$S3_BUCKET/$MODULE_NAME/" | grep PRE | awk '{print $2}' | sed 's#/##' | sort -r)
      COUNT=0
      for ver in $LIST; do
        ((COUNT++))
        if [ $COUNT -gt 5 ]; then
          echo "Elimino la versione S3 più vecchia: $ver"
          aws s3 rm "s3://$S3_BUCKET/$MODULE_NAME/$ver" --recursive
        fi
      done

      echo "Artefatti caricati con successo su S3: s3://$S3_BUCKET/$ARTIFACT_DIR/"
  only:
    - main
  environment:
    name: sit

build_docker:
  stage: build_docker
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  services:
    - docker:dind
  dependencies:
    - build
    - extract_module_name
    - check_version
  script:
    - |
      # Installa Docker
      amazon-linux-extras install docker
      service docker start
      
      # Autenticazione ad AWS ECR
      aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      
      # Creare il repository ECR se non esiste
      aws ecr describe-repositories --repository-names auxdromos-$MODULE_NAME --region $AWS_DEFAULT_REGION || \
        aws ecr create-repository --repository-name auxdromos-$MODULE_NAME --region $AWS_DEFAULT_REGION
      
      cat > Dockerfile <<EOF
      FROM amazoncorretto:17
      
      # Copia i file di distribuzione
      COPY target/*.jar /app/
      COPY target/distribution/ /app/distribution/
      COPY target/build-info.json /app/
      
      WORKDIR /app
      ENV APP_ENV=sit
      
      ENTRYPOINT ["java", "-jar", "$MODULE_NAME.jar"]
      EOF
      
      # Build dell'immagine Docker
      docker build -t auxdromos-$MODULE_NAME:$VERSION .
      
      # Tag e push dell'immagine a ECR
      docker tag auxdromos-$MODULE_NAME:$VERSION $ECR_REGISTRY/auxdromos-$MODULE_NAME:$VERSION
      docker push $ECR_REGISTRY/auxdromos-$MODULE_NAME:$VERSION
      
      docker tag auxdromos-$MODULE_NAME:$VERSION $ECR_REGISTRY/auxdromos-$MODULE_NAME:latest
      docker push $ECR_REGISTRY/auxdromos-$MODULE_NAME:latest
      
      # Gestione delle immagini vecchie: ne teniamo 5
      IMAGES_TO_DELETE=$(aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --region $AWS_DEFAULT_REGION \
        --query 'sort_by(imageDetails,& imagePushedAt)[:-5].imageDigest' --output text)
      
      if [ -n "$IMAGES_TO_DELETE" ]; then
        for digest in $IMAGES_TO_DELETE; do
          echo "Elimino l'immagine con digest: $digest"
          aws ecr batch-delete-image --repository-name auxdromos-$MODULE_NAME --region $AWS_DEFAULT_REGION \
            --image-ids imageDigest=$digest
        done
      fi
  only:
    - main
  environment:
    name: sit

deploy_sit:
  stage: deploy_sit
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - extract_module_name
    - check_version
  script:
    - |
      # Installa SSH client
      yum install -y openssh-clients
      
      # Configura SSH key
      mkdir -p ~/.ssh
      echo "$EC2_PRIVATE_KEY" > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      
      # Aggiorna script di deploy (se serve)
      rsync -avz ./scripts/deploy_module.sh $EC2_USER@$EC2_HOST:/opt/auxdromos/aws/sit/scripts/
      
      # Esegui il deploy
      ssh $EC2_USER@$EC2_HOST "cd /opt/auxdromos/aws/sit && ./scripts/deploy_module.sh $MODULE_NAME"
  only:
    - main
  environment:
    name: sit
