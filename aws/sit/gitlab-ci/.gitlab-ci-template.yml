image: maven:3.9.9-amazoncorretto-17

stages:
  - prepare
  - check_version
  - build
  - test
  - artifact_upload_s3
  - build_docker
  - deploy_sit

# Rimuovo l'inclusione duplicata del template di security

extract_module_name:
  stage: prepare
  script: |
    echo "Estrazione del MODULE_NAME dal pom.xml..."
    export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    if [ -z "$MODULE_NAME" ]; then 
      echo "Errore: impossibile estrarre MODULE_NAME dal pom.xml"
      exit 1
    fi
    echo "MODULE_NAME estratto: $MODULE_NAME"
    echo "MODULE_NAME=$MODULE_NAME" >> module_name.env
    
    # Estrai anche la versione
    export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    echo "VERSION=$VERSION" >> module_name.env
    echo "VERSION estratta: $VERSION"
    
    # Aggiungi informazioni sul branch
    echo "CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME" >> module_name.env
  artifacts:
    reports:
      dotenv: module_name.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_name
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    # Carichiamo VERSION dal file .env creato prima
    if [ -f module_name.env ]; then
      . module_name.env
    fi
    
    # Regole diverse per branch diversi
    if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
      # Solo per main: vietiamo l'uso di SNAPSHOT
      if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
        echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
        exit 1
      fi
    
      # Solo per main: verifichiamo su ECR
      if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
        echo "Errore: La versione '$VERSION' è già presente su ECR."
        exit 1
      fi
    
      # Solo per main: verifichiamo su S3
      FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" 2>/dev/null | wc -l || echo 0)
      echo "DEBUG FOUND = $FOUND"
    
      if [[ "$FOUND" -gt 0 ]]; then
        echo "Versione già presente su S3. Interrompo la pipeline."
        exit 1
      else
        echo "Versione non presente su S3. Procedo..."
      fi
    else
      # Per develop: consentiamo SNAPSHOT ma controlliamo se esiste già nella cartella develop
      if [[ "$VERSION" != *"SNAPSHOT"* ]]; then
        echo "Avviso: Versione '$VERSION' in 'develop' non è una SNAPSHOT. Consigliato usare suffisso -SNAPSHOT."
      fi
    
      # Verifica su S3 nel percorso develop
      FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/develop/${MODULE_NAME}/${VERSION}/" 2>/dev/null | wc -l || echo 0)
      echo "DEBUG FOUND = $FOUND"
    
      if [[ "$FOUND" -gt 0 ]]; then
        echo "Versione già presente su S3 nel percorso develop. Sovrascrivo..."
      fi
    fi

build:
  stage: build
  dependencies:
    - extract_module_name
  script:
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
    # Crea un file manifest che descrive questa build
    - |
      if [ -f module_name.env ]; then
        . module_name.env
      fi
      cat > target/build-info.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  artifacts:
    paths:
      - target/*.jar
      - target/distribution/
      - target/build-info.json

test:
  stage: test
  dependencies:
    - extract_module_name
    - build
  script:
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

artifact_upload_s3:
  stage: artifact_upload_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - build
    - extract_module_name
  script: |
    echo "Caricamento degli artefatti su S3..."
    
    if [ -f module_name.env ]; then
      . module_name.env
    fi
    
    # Cambia il percorso in base al branch
    if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
      # Per il branch main, usa il percorso standard
      ARTIFACT_DIR="$MODULE_NAME/$VERSION"
      echo "Caricamento artefatti di produzione in $ARTIFACT_DIR"
    else
      # Per develop o altri branch, aggiungi develop come prefisso
      ARTIFACT_DIR="develop/$MODULE_NAME/$VERSION"
      echo "Caricamento artefatti di sviluppo in $ARTIFACT_DIR"
    fi
    
    # Carica i JAR
    JARS=$(find target -name "*.jar" -type f)
    for jar in $JARS; do
      aws s3 cp "$jar" "s3://$S3_BUCKET_NAME/$ARTIFACT_DIR/$(basename $jar)"
    done
    
    # Carica build-info.json
    aws s3 cp target/build-info.json "s3://$S3_BUCKET_NAME/$ARTIFACT_DIR/build-info.json"
    
    # Carica directory di distribuzione se presente
    if [ -d "target/distribution" ]; then
      aws s3 cp target/distribution/ "s3://$S3_BUCKET_NAME/$ARTIFACT_DIR/distribution/" --recursive
    fi

build_docker:
  stage: build_docker
  tags:
    - ec2-shell
  dependencies:
    - extract_module_name
    - artifact_upload_s3
  only:
    - main
  script: |
    set -e  # Interrompe l'esecuzione in caso di errore
    
    if [ -f module_name.env ]; then
      . module_name.env
    fi
    
    # Solo per main, non creare docker per versioni SNAPSHOT
    if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
      echo "Attenzione: Versione SNAPSHOT rilevata su main. Non costruisco l'immagine Docker."
      exit 1
    fi
    
    echo "Costruzione dell'immagine Docker per $MODULE_NAME:$VERSION"
    
    # Verifica configurazione AWS
    aws --version
    aws sts get-caller-identity
    docker --version
    
    # Configurazione AWS CLI per ECR
    aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    
    # Crea repository ECR se non esiste
    aws ecr describe-repositories --repository-names auxdromos-$MODULE_NAME || aws ecr create-repository --repository-name auxdromos-$MODULE_NAME
    
    # Recupera gli artefatti da S3
    mkdir -p ./artifacts/
    aws s3 cp "s3://$S3_BUCKET_NAME/$MODULE_NAME/$VERSION/" ./artifacts/ --recursive
    
    # Copia il Dockerfile nella directory di lavoro se non è presente
    if [ ! -f Dockerfile ] && [ -f ./artifacts/Dockerfile ]; then
      cp ./artifacts/Dockerfile ./
    fi
    
    # Costruisci e pubblica l'immagine Docker
    docker build -t auxdromos-$MODULE_NAME:$VERSION .
    docker tag auxdromos-$MODULE_NAME:$VERSION $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/auxdromos-$MODULE_NAME:$VERSION
    docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/auxdromos-$MODULE_NAME:$VERSION    

deploy_sit:
  stage: deploy_sit
  image: amazon/aws-cli:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

  dependencies:
    - extract_module_name
  only:
    - main
  script: |
    echo "Esecuzione del deploy in ambiente SIT..."
    if [ -f module_name.env ]; then 
      . module_name.env
    fi
    echo "Modulo da deployare: $MODULE_NAME"
    
    # Solo per main, non fare deploy di versioni SNAPSHOT
    if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
      echo "Errore: Versione SNAPSHOT rilevata su main. Impossibile eseguire il deploy."
      exit 1
    fi
    
    # Configurare AWS CLI per ECR
    aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    
    # Esegui lo script di deploy
    chmod +x aws/sit/scripts/deploy_module.sh
    cd aws/sit && bash scripts/deploy_module.sh $MODULE_NAME $VERSION
  environment:
    name: sit
