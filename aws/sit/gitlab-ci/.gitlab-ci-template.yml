image: maven:3.9.9-amazoncorretto-17

stages:
  - prepare
  - check_version
  - build
  - test
  - package
  - docker
  - upload_to_s3
  - tag_latest
  - cleanup
  - deploy_sit

extract_module_info:
  stage: prepare
  script:
    - echo "Estrazione delle informazioni del modulo di distribuzione..."
    - |
      if [ -f "pom.xml" ]; then
        export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
        export VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      else
        # Se non c'è un pom.xml, assegna un nome di default e una versione basata sullo short SHA
        export MODULE_NAME="auxdromos-distro"
        export VERSION="1.0.0-${CI_COMMIT_SHORT_SHA}"
      fi

    - echo "MODULE_NAME=$MODULE_NAME" >> module_info.env
    - echo "VERSION=$VERSION" >> module_info.env
    - echo "Modulo $MODULE_NAME, Versione $VERSION"
    - ls -la module_info.env
    - cat module_info.env
  artifacts:
    reports:
      dotenv: module_info.env

check_version:
  stage: check_version
  dependencies:
    - extract_module_info
  image:
    name: amazon/aws-cli:latest
    entrypoint: [ "" ]
  script: |
    set -e
    set -o pipefail

    echo "Verifica della versione..."

    if [ -f module_info.env ]; then
      . module_info.env
    fi

    if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
      if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
        echo "Errore: Versione '$VERSION' non valida in 'main' (SNAPSHOT non consentito)."
        exit 1
      fi
    
      if aws ecr describe-images --repository-name auxdromos-$MODULE_NAME --image-ids imageTag=$VERSION --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
        echo "Errore: La versione '$VERSION' è già presente su ECR."
        exit 1
      fi
    
      echo "Versione valida per main. Procedo..."
    else
      DEVELOP_PATH="develop/${MODULE_NAME}/${VERSION}/"
      FOUND=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${DEVELOP_PATH}" 2>/dev/null | wc -l || echo 0)
      echo "DEBUG FOUND = $FOUND per path ${DEVELOP_PATH}"

      if [[ "$FOUND" -gt 0 ]]; then
        echo "Versione già presente su S3 in develop. Interrompo la pipeline."
        exit 1
      else
        echo "Versione non presente su S3 in develop. Procedo..."
      fi
    fi

build:
  stage: build
  image: maven:3.9.9-amazoncorretto-17
  dependencies:
    - extract_module_info
    - check_version
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
    - |
      cat > target/build-info.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "version": "$VERSION",
        "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF
  artifacts:
    paths:
      - target/*.jar
      - target/distribution/
      - target/build-info.json

test:
  stage: test
  image: maven:3.9.9-amazoncorretto-17
  dependencies:
    - extract_module_info
    - build
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

package_configs:
  stage: package
  image: alpine:latest
  script:
    - set -x
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Creazione pacchetto di configurazione $MODULE_NAME versione $VERSION..."
    - apk add --no-cache zip
    - mkdir -p dist
    - |
      FILES_TO_ZIP=""
      for DIR in aws docker scripts env; do
        if [ -d "$DIR" ]; then
          FILES_TO_ZIP="$FILES_TO_ZIP $DIR/"
          echo "Aggiungo directory $DIR al ZIP"
        fi
      done
      
      for EXT in yml yaml properties; do
        if ls *.$EXT 1>/dev/null 2>&1; then
          FILES_TO_ZIP="$FILES_TO_ZIP *.$EXT"
          echo "Aggiungo file *.$EXT al ZIP"
        fi
      done
      
      if [ -n "$FILES_TO_ZIP" ]; then
        echo "Creazione ZIP con: $FILES_TO_ZIP"
        zip -r "dist/$MODULE_NAME-$VERSION.zip" $FILES_TO_ZIP
      else
        echo "AVVISO: Nessun file trovato da includere nel ZIP, genero ZIP vuoto"
        touch empty.txt
        zip -r "dist/$MODULE_NAME-$VERSION.zip" empty.txt
        rm empty.txt
      fi
    - if [ -f "dist/$MODULE_NAME-$VERSION.zip" ]; then
      echo "File ZIP creato dist/$MODULE_NAME-$VERSION.zip";
      else
      echo "ERRORE Il file ZIP non è stato creato"; exit 1;
      fi
    - echo "{\"moduleName\":\"$MODULE_NAME\",\"version\":\"$VERSION\",\"buildDate\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"branch\":\"$CI_COMMIT_REF_NAME\",\"commitHash\":\"$CI_COMMIT_SHA\"}" > dist/manifest.json
  dependencies:
    - extract_module_info
    - check_version
  artifacts:
    paths:
      - dist/

build_docker:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - extract_module_info
    - build
  before_script:
    - apk add --no-cache aws-cli curl
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - echo "Verificando presenza Dockerfile per $MODULE_NAME..."
    - |
      if [ -f "Dockerfile" ]; then
        echo "Dockerfile trovato per $MODULE_NAME, procedo con build e push"
      
        if ! aws ecr describe-repositories --repository-names auxdromos-$MODULE_NAME --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "Repository ECR 'auxdromos-$MODULE_NAME' non esiste, lo creo..."
          aws ecr create-repository --repository-name auxdromos-$MODULE_NAME --region $AWS_DEFAULT_REGION
          echo "Repository ECR creato con successo."
        else
          echo "Repository ECR 'auxdromos-$MODULE_NAME' esiste già."
        fi
      
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      
        docker build -t auxdromos-$MODULE_NAME:$VERSION .
      
        docker tag auxdromos-$MODULE_NAME:$VERSION $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/auxdromos-$MODULE_NAME:$VERSION
      
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/auxdromos-$MODULE_NAME:$VERSION
      
        echo "Immagine Docker caricata con successo: auxdromos-$MODULE_NAME:$VERSION"
      else
        echo "Dockerfile non trovato per $MODULE_NAME, salto build e push Docker"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success

upload_to_s3:
  stage: upload_to_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [ "" ]
  dependencies:
    - extract_module_info
    - build
    - package_configs
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        S3_PATH="${MODULE_NAME}/${VERSION}/"
      else
        S3_PATH="develop/${MODULE_NAME}/${VERSION}/"
      fi
    - echo "Uploading artifacts for $MODULE_NAME version $VERSION into s3://${S3_BUCKET_NAME}/${S3_PATH}"
    - |
      for jar in target/*.jar; do
        if [ -f "$jar" ]; then
          jar_filename=$(basename "$jar")
          echo "Uploading $jar_filename..."
          aws s3 cp "$jar" "s3://${S3_BUCKET_NAME}/${S3_PATH}${jar_filename}"
        fi
      done
    - |
      if [ -d "target/distribution/" ]; then
        echo "Uploading distribution files..."
        aws s3 cp target/distribution/ "s3://${S3_BUCKET_NAME}/${S3_PATH}distribution/" --recursive
      fi
    - |
      if [ -f "target/build-info.json" ]; then
        echo "Uploading build-info..."
        aws s3 cp target/build-info.json "s3://${S3_BUCKET_NAME}/${S3_PATH}build-info.json"
      fi
    - |
      if [ -f "dist/$MODULE_NAME-$VERSION.zip" ]; then
        echo "Uploading ZIP file dist/$MODULE_NAME-$VERSION.zip..."
        aws s3 cp "dist/$MODULE_NAME-$VERSION.zip" "s3://${S3_BUCKET_NAME}/${S3_PATH}$MODULE_NAME-$VERSION.zip"
      else
        echo "ERRORE: Il file ZIP dist/$MODULE_NAME-$VERSION.zip non esiste. Correggi il job package_configs."
        exit 1
      fi
    - aws s3 ls "s3://${S3_BUCKET_NAME}/${S3_PATH}" --recursive

tag_latest:
  stage: tag_latest
  image:
    name: amazon/aws-cli:latest
    entrypoint: [ "" ]
  dependencies:
    - extract_module_info
    - upload_to_s3
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        S3_PATH="${MODULE_NAME}/"
        LATEST_PATH="${MODULE_NAME}/latest.json"
      else
        S3_PATH="develop/${MODULE_NAME}/"
        LATEST_PATH="develop/${MODULE_NAME}/latest.json"
      fi

    - |
      cat > latest.json <<EOF
      {
        "moduleName": "$MODULE_NAME",
        "latestVersion": "$VERSION",
        "updateDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "branch": "$CI_COMMIT_REF_NAME",
        "commitHash": "$CI_COMMIT_SHA"
      }
      EOF

    - echo "Tagging della versione $VERSION come 'latest' per $MODULE_NAME nel path $S3_PATH"
    - aws s3 cp latest.json "s3://${S3_BUCKET_NAME}/${LATEST_PATH}"

deploy_sit:
  stage: deploy_sit
  image: alpine:latest
  dependencies:
    - extract_module_info
  timeout: 15m
  before_script:
    - apk add --no-cache openssh-client bash aws-cli
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$EC2_PRIVATE_KEY" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keygen -y -f ~/.ssh/id_rsa > /dev/null 2>&1 || (echo "Invalid private key"; exit 1)
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - set -e
    - echo "Deploying module $MODULE_NAME, versione $VERSION"
    - if [ -f module_info.env ]; then . module_info.env; fi
    - >
      if [ "$MODULE_NAME" = "distro" ]; then
         echo "[Deploy] Modulo distro: scarico gli artifact da S3 e li carico su EC2..."
         mkdir -p /tmp/${MODULE_NAME}
         aws s3 cp "s3://${S3_BUCKET_NAME}/${MODULE_NAME}/${VERSION}/" /tmp/${MODULE_NAME}/ --recursive
         echo "[Deploy] Pulisco i vecchi artifact su EC2..."
         ssh ${EC2_USER}@${EC2_HOST} "sudo rm -rf /app/${MODULE_NAME}/artifacts/*"
         echo "[Deploy] Creo la directory target su EC2 (/app/${MODULE_NAME}/artifacts)..."
         ssh ${EC2_USER}@${EC2_HOST} "sudo mkdir -p /app/${MODULE_NAME}/artifacts && sudo chown -R ${EC2_USER}:${EC2_USER} /app/${MODULE_NAME}"
         echo "[Deploy] Copio i nuovi file dalla macchina locale all'EC2..."
         scp -r /tmp/${MODULE_NAME}/* ${EC2_USER}@${EC2_HOST}:/app/${MODULE_NAME}/artifacts/
         echo "[Deploy] Verifico la presenza del file ZIP e inizio l'estrazione..."
         ssh ${EC2_USER}@${EC2_HOST} "cd /app/${MODULE_NAME}/artifacts && \
           if ls ${MODULE_NAME}-${VERSION}.zip >/dev/null 2>&1; then \
             echo '[Deploy] ZIP file trovato. Inizio estrazione...'; \
             unzip -o ${MODULE_NAME}-${VERSION}.zip || { echo '[Deploy] ERRORE: unzip fallito.'; exit 1; }; \
             mv ${MODULE_NAME}-${VERSION}.zip ${MODULE_NAME}-last.zip; \
           else \
             echo '[Deploy] ERRORE: File ZIP ${MODULE_NAME}-${VERSION}.zip non trovato.'; \
             exit 1; \
           fi"
         echo "[Deploy] Imposto la versione corrente come 'distro-last'"
         echo "distro-last" > /tmp/current-version.txt
         scp /tmp/current-version.txt ${EC2_USER}@${EC2_HOST}:/app/${MODULE_NAME}/current-version.txt
         echo "[Deploy] Deploy per il modulo distro completato."
      else
         echo "[Deploy] Modulo $MODULE_NAME (non-distro): uso lo script deploy_module.sh presente nei file distro."
         ssh ${EC2_USER}@${EC2_HOST} "
           sudo mkdir -p /app/${MODULE_NAME} && sudo chown -R ${EC2_USER}:${EC2_USER} /app/${MODULE_NAME};
           if [ -f /app/distro/artifacts/aws/sit/script/deploy_module.sh ]; then
             echo 'Trovato deploy_module.sh in /app/distro/artifacts/aws/sit/script';
             cd /app/distro/artifacts &&
             ./aws/sit/script/deploy_module.sh ${MODULE_NAME}
           else
             echo 'ERROR: deploy_module.sh non trovato in /app/distro/artifacts/aws/sit/script';
             exit 1;
           fi
         "
      fi
    - echo "Deployment completato per $MODULE_NAME."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success

cleanup_s3:
  stage: cleanup
  image:
    name: amazon/aws-cli:latest
    entrypoint: [ "" ]
  dependencies:
    - extract_module_info
  script:
    - if [ -f module_info.env ]; then . module_info.env; fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        S3_BASE_PATH="${MODULE_NAME}/"
      else
        S3_BASE_PATH="develop/${MODULE_NAME}/"
      fi

    - echo "Pulizia S3 per $S3_BASE_PATH, mantenendo solo le ultime 5 versioni..."
    - |
      echo "Elenco contenuti in s3://${S3_BUCKET_NAME}/${S3_BASE_PATH}"
      aws s3 ls "s3://${S3_BUCKET_NAME}/${S3_BASE_PATH}"
      
      VERSIONS=$(aws s3 ls "s3://${S3_BUCKET_NAME}/${S3_BASE_PATH}" | grep '/$' | grep -E '[0-9]+\.[0-9]+' | awk '{print $2}' | sed 's#/$##' | sort -t. -k1,1n -k2,2n -k3,3n)
      
      echo "Versioni trovate dopo il filtraggio:"
      echo "$VERSIONS"
      
      VERSION_COUNT=$(echo "$VERSIONS" | grep -v '^$' | wc -l)
      echo "Numero di versioni valide: $VERSION_COUNT"
      
      if [[ $VERSION_COUNT -gt 5 ]]; then
        TO_DELETE=$(($VERSION_COUNT - 5))
        echo "Rimozione delle $TO_DELETE versioni più vecchie..."
      
        VERSIONS_TO_DELETE=$(echo "$VERSIONS" | head -n $TO_DELETE)
      
        echo "Versioni da eliminare:"
        echo "$VERSIONS_TO_DELETE"
      
        for OLD_VERSION in $VERSIONS_TO_DELETE; do
          if [[ -n "$OLD_VERSION" ]]; then
            echo "Rimozione versione $OLD_VERSION da S3..."
            aws s3 rm "s3://${S3_BUCKET_NAME}/${S3_BASE_PATH}${OLD_VERSION}/" --recursive
          fi
        done
      else
        echo "Ci sono $VERSION_COUNT versioni, non è necessaria alcuna pulizia (< 6)."
      fi