image: maven:3.9.9-amazoncorretto-17

stages:
  - prepare
  - build
  - test
  - artifact_upload_s3
  - check_version
  - deploy_sit

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

variables:
  S3_BUCKET_NAME: "auxdromos-artifacts-unique"
  AWS_DEFAULT_REGION: "us-east-1"

extract_module_name:
  stage: prepare
  script: |
    echo "Estrazione del MODULE_NAME dal pom.xml..."
    export MODULE_NAME=$(grep "<artifactId>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    if [ -z "$MODULE_NAME" ]; then echo "Errore: impossibile estrarre MODULE_NAME dal pom.xml"; exit 1; fi
    echo "MODULE_NAME estratto: $MODULE_NAME"
    echo "MODULE_NAME=$MODULE_NAME" >> module_name.env
  artifacts:
    reports:
      dotenv: module_name.env

build:
  stage: build
  dependencies:
    - extract_module_name
  script:
    - echo "Build del modulo $MODULE_NAME..."
    - mvn clean package -Psit -DskipTests
  artifacts:
    paths:
      - target/*.jar

test:
  stage: test
  dependencies:
    - extract_module_name
  script:
    - echo "Test del modulo $MODULE_NAME..."
    - mvn test

artifact_upload_s3:
  stage: artifact_upload_s3
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - build
    - extract_module_name
  script:
    - set -x
    - VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
    - echo "Versione rilevata - $VERSION - Modulo $MODULE_NAME - $MODULE_NAME-$VERSION.jar"
    - echo "Contenuto della directory target:"
    - ls -la target
    # Cerca il file jar usando un pattern che includa eventuali suffissi
    - JAR_FILE=$(ls target/$MODULE_NAME-$VERSION*.jar)
    - echo "File jar individuato $JAR_FILE"
    - aws s3 cp $JAR_FILE s3://$S3_BUCKET_NAME/$MODULE_NAME/ --region $AWS_DEFAULT_REGION
    - |
      files_to_delete=$(aws s3 ls s3://$S3_BUCKET_NAME/$MODULE_NAME/ --region $AWS_DEFAULT_REGION | head -n -5 | awk '{print $4}')
      if [ -n "$files_to_delete" ]; then
        for file in $files_to_delete; do
          echo "Eliminazione del file: $file"
          aws s3 rm s3://$S3_BUCKET_NAME/$MODULE_NAME/$file --region $AWS_DEFAULT_REGION
        done
      else
        echo "Meno di 5 versioni presenti, nessun file eliminato"
      fi
    - exit 0
  only:
    - develop
  environment:
    name: sit

check_version:
  stage: check_version
  dependencies:
    - extract_module_name
  image: amazon/aws-cli:latest
  only:
    - main
  script:
    - |
      set -x
      NEW_VERSION=$(grep "<version>" pom.xml | head -1 | sed 's/[<>]/|/g' | cut -d'|' -f3)
      echo "Nuova versione rilevata: $NEW_VERSION"
      
      # Controlla se la versione contiene "SNAPSHOT"
      if [[ "$NEW_VERSION" == *"SNAPSHOT"* ]]; then
        echo "Errore: la versione $NEW_VERSION è una versione SNAPSHOT e non può essere rilasciata sul ramo main"
        exit 1
      fi
      
      CURRENT_FILE=$(aws s3 ls s3://$S3_BUCKET_NAME/$MODULE_NAME/ --region $AWS_DEFAULT_REGION | awk '{print $4}' | sort -V | tail -n1)
      
      if [ -n "$CURRENT_FILE" ]; then
        CURRENT_VERSION=$(echo "$CURRENT_FILE" | sed "s/$MODULE_NAME-//; s/\.jar//")
        echo "Versione attualmente presente su S3: $CURRENT_VERSION"
      else
        echo "Nessuna versione presente su S3."
      fi
      
      if [ -n "$CURRENT_FILE" ]; then
        if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
          echo "Errore: la nuova versione ($NEW_VERSION) è la stessa di quella presente ($CURRENT_VERSION)"
          exit 1
        fi
      
        SORTED=$(printf '%s\n' "$CURRENT_VERSION" "$NEW_VERSION" | sort -V | head -n1)
        if [ "$SORTED" = "$NEW_VERSION" ]; then
          echo "Errore: la nuova versione ($NEW_VERSION) non è successiva a quella presente ($CURRENT_VERSION)"
          exit 1
        fi
      fi
      
      aws s3 ls s3://$S3_BUCKET_NAME/$MODULE_NAME/$MODULE_NAME-$NEW_VERSION.jar --region $AWS_DEFAULT_REGION
      if [ $? -eq 0 ]; then
        echo "Errore: la versione $NEW_VERSION è già presente su S3."
        exit 1
      else
        echo "La versione $NEW_VERSION non è presente su S3, procedo."
      fi

deploy_sit:
  stage: deploy_sit
  image: alpine:latest
  dependencies:
    - artifact_upload_s3
  before_script:
    - apk update && apk add --no-cache openssh-client bash docker-compose
    - mkdir -p ~/.ssh
    # Imposta la chiave privata per la connessione SSH
    - echo "$EC2_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
  script:
    # Copia lo script deploy_distro.sh sull'istanza EC2
    - scp aws/sit/script/deploy_distro.sh $EC2_USER@$EC2_HOST:/opt/auxdromos/scripts/deploy_distro.sh
    # Esegui lo script di deploy in remoto
    - ssh $EC2_USER@$EC2_HOST "bash /opt/auxdromos/scripts/deploy_distro.sh $MODULE_NAME"
  only:
    - main
  environment:
    name: sit

